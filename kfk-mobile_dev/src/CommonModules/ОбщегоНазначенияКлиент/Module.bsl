
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПроверитьДоступностьРасширения1C_8_3_6 () Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
	
		НовВз = Новый ЗапускПриложенияМобильногоУстройства();
		НовВз.Действие = "rs.core.CHECK_EXTENSION";
		НовВз.ДополнительныеДанные.Добавить("Extension","1C.8.3.6","string");
		
		КодРезультатаРаботы = НовВз.Запустить(Истина);
		
		Если НЕ КодРезультатаРаботы = -1 Тогда
			Сообщить("Модуль rs.core не установлен.");
			Возврат Ложь;
		КонецЕсли;
		
		Result = НовВз.ДополнительныеДанные.Получить("Result");
		
		Если Result = Неопределено Тогда
			Сообщить("Код возврата Result rs.core не получен.");
			Возврат Ложь;
		КонецЕсли;
		
		Если Result.Значение = 1 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьДоступностьРасширения1C_8_3_9 () Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
	
		НовВз = Новый ЗапускПриложенияМобильногоУстройства();
		НовВз.Действие = "rs.core.CHECK_EXTENSION";
		НовВз.ДополнительныеДанные.Добавить("Extension","1C.8.3.9","string");
		
		КодРезультатаРаботы = НовВз.Запустить(Истина);
		
		Если НЕ КодРезультатаРаботы = -1 Тогда
			Сообщить("Модуль rs.core не установлен.");
			Возврат Ложь;
		КонецЕсли;
		
		Result = НовВз.ДополнительныеДанные.Получить("Result");
		
		Если Result = Неопределено Тогда
			Сообщить("Код возврата Result rs.core не получен.");
			Возврат Ложь;
		КонецЕсли;
		
		Если Result.Значение = 1 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
				
	#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

Функция ИнициализироватьВнешнююКомпонентуRSDriver () Экспорт
	
	Если СтрНайти(ИмяКомпьютера(), "i6300_") = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда

		УстановитьВнешнююКомпоненту ("ОбщийМакет.RSDriver");
		
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.RSDriver", "RSDriver", ТипВнешнейКомпоненты.Native) Тогда
			
			Попытка
				
				глВКRSDriver = Новый ("AddIn.RSDriver.RSDriver");
				
				ИмяДрайвера         = "";
				ОписаниеДрайвера    = "";
				ДоступныеУстройства = "";
				Версия = 0;
				ТипВК  = ""; 
				Загружен = Ложь;
				Адрес = "";
				
				глВКRSDriver.ПолучитьОписание(ИмяДрайвера,ОписаниеДрайвера,ДоступныеУстройства,Версия,ТипВК,Загружен,Адрес);
								
		  		Возврат Истина;  
			Исключение
				Сообщить(ОписаниеОшибки());
		  		Сообщить("Ошибка создания класса RSDriver");
			Конецпопытки;
			
		Иначе
			Сообщить("Компонента RSDriver не загружена");
		КонецЕсли;

  	#КонецЕсли
  
  Возврат Ложь;

КонецФункции

Функция ИнициализироватьВнешнююКомпонентуRSExchange () Экспорт
	
	Результат = Ложь;
	
	#Если МобильноеПриложениеКлиент  ИЛИ МобильныйКлиент Тогда
		
		Попытка
			Если ПодключитьВнешнююКомпоненту("ОбщийМакет.RSExchange", "RSExchange", ТипВнешнейКомпоненты.Native) Тогда
				глВКRSExchange = Новый ("AddIn.RSExchange.RSExchange");
				Результат = Истина;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	#КонецЕсли
	
	Возврат Результат;

	
КонецФункции

// Производит обработку данных события, полученных от клиента.
//
Процедура ОбработатьСобытиеОтУстройства(ОписаниеСобытия) Экспорт
	
	Если ОписаниеСобытия.Источник = "RSExchange" Тогда
		Оповестить(ОписаниеСобытия.Событие, ОписаниеСобытия.Данные, "RSExchange");
	Иначе
		Оповестить(ОписаниеСобытия.Событие, ОписаниеСобытия.Данные, "ПодключаемоеОборудование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСканер() Экспорт
	
	Если глВКRSDriver = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		
		глВКRSDriver.УстановитьПараметр("Barcode_BEEP", ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ЗвукПриСканировании"));
		глВКRSDriver.УстановитьПараметр("Barcode_BZZ",	ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ВиброПриСканировании"));
		глВКRSDriver.Подключить("Barcode");	
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОтключитьСканер() Экспорт
	
	Если глВКRSDriver = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		
		Попытка
			глВКRSDriver.Отключить("Barcode");	
		Исключение
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

Функция КаталогФото() Экспорт
	
	ПутьККаталогу = КаталогДокументов() + "/kfk_photo";
	КаталогФото = Новый Файл(ПутьККаталогу);
	Если Не КаталогФото.Существует() Тогда 
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;

	Возврат ПутьККаталогу;
	
КонецФункции