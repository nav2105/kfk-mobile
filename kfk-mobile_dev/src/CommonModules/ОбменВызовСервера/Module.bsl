
#Область ПрограмныйИнтерфейс

// Функция - Запустить синхронизацию с сервером в фоне
//
// Параметры:
//  ПараметрыЗапуска	 - Структура - Параметры запуска фонового задания;
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор формы;
//  АдресХранилища		 - Строка - Адрес хранилища дополнительной информации.
// 
// Возвращаемое значение:
//  Булево - Истина, если задание запущено.
//
Функция ЗапуститьСинхронизациюССерверомВФоне(ПараметрыЗапуска, ИдентификаторЗадания, АдресХранилища) Экспорт
	
	ИмяФоновогоЗадания = ПараметрыЗапуска.РежимСинхронизации;

	// Проверим наличие активного задания синхронизации.
	ОтборЗаданий = Новый Структура();
	ОтборЗаданий.Вставить("Наименование", ИмяФоновогоЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если Не Задания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	// Запустим новое задание синхронизации.
	ВыполнениеВФоне = Истина;
	Данные = Неопределено;

	Если Не ПараметрыЗапуска.Свойство("Данные", Данные) Тогда
		АдресХранилища = 
			ПоместитьВоВременноеХранилище(
				Неопределено, ПараметрыЗапуска.УникальныйИдентификатор);
		Данные = АдресХранилища;
	КонецЕсли;

	Параметры = Новый Массив();
	Параметры.Добавить(ИмяФоновогоЗадания);
	Параметры.Добавить(ВыполнениеВФоне);

	Задание = ФоновыеЗадания.Выполнить("ОбменВызовСервера.ОтправитьПолучитьДанные", Параметры, Новый УникальныйИдентификатор, ИмяФоновогоЗадания);

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;

	Возврат Истина;

КонецФункции

// Проверяет состояние задания фоновой синхронизации.
//
// Параметры:
//  ФоновоеЗаданиеИдентификатор	 - УникальныйИдентификатор - Идентификатор задания;
//  ФоновоеЗаданиеАдресХранилища - Строка - Адрес хранилища на сервере для помещения результат;
//  ОписаниеПоследнегоОбновления - Строка - Описание текщей операции и истории обновления.
// 
// Возвращаемое значение:
//  Результат - Структура возвращаемых данных.
//
Функция ПроверитьСостояниеФоновойСинхронизации(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища, ОписаниеПоследнегоОбновления) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("СообщениеОбОшибке", Неопределено);
	Результат.Вставить("ОбновитьДатуСинхронизации", Ложь);

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеИдентификатор);

	Если Задание = Неопределено Тогда
		Результат.СообщениеОбОшибке = 
			НСтр("ru = 'Не удалось выполнить синхронизацию. См. протокол обмена'");

	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);

	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.ЗаданиеВыполнено = Истина;

	КонецЕсли;

	Если Не Задание = Неопределено Тогда

		ВсеСообщения = Задание.ПолучитьСообщенияПользователю(Ложь);
		Если ВсеСообщения = Неопределено Тогда
			ВсеСообщения = Новый Массив();
		КонецЕсли;

		ЕстьОшибки = Ложь;

		Для Каждого СообщениеПользователю Из ВсеСообщения Цикл

			МассивРезультатовРаботы = СтрРазделить(СообщениеПользователю.Текст, ";");

			ТекущаяСтадияРаботы = МассивРезультатовРаботы[0];
			ЕстьОшибки = Булево(МассивРезультатовРаботы[1]);
			ВСообщенияхЕстьДанные = Булево(МассивРезультатовРаботы[2]);

			Если СтрНайти(МассивРезультатовРаботы[3], ",") Тогда
				СчетчикиОбъектов = СтрРазделить(МассивРезультатовРаботы[3], ",");
			Иначе

				Если ТекущаяСтадияРаботы = "Завершение" 
					И ЗначениеЗаполнено(ФоновоеЗаданиеАдресХранилища) Тогда

					Результат.Вставить("СведенияОЗагруженныхДанных", 
						ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища));

				КонецЕсли;

			КонецЕсли;

			Результат.Вставить("ТекущаяСтадияРаботы", ТекущаяСтадияРаботы);
			Результат.Вставить("ЕстьОшибки", ЕстьОшибки);
			Результат.Вставить("ВСообщенияхЕстьДанные", ВСообщенияхЕстьДанные);

			Если ТекущаяСтадияРаботы = "ЗаписьДанных" Тогда
				Результат.Вставить("СчетчикиОбъектов", СчетчикиОбъектов);

			ИначеЕсли ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации" Тогда
				Результат.ОбновитьДатуСинхронизации = Истина;

			КонецЕсли;

		КонецЦикла;

		СформироватьОписаниеТекущегоСостояния(
			ЕстьОшибки, ТекущаяСтадияРаботы, ОписаниеПоследнегоОбновления);

	КонецЕсли;

	Результат.Вставить("ОписаниеПоследнегоОбновления", ОписаниеПоследнегоОбновления);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбменССервером

Функция СоединениеССервером()
	
	ПараметрыАвторизации = Константы.СоздатьНабор("ПользовательЦентральнойБазы, Пароль");
	ПараметрыАвторизации.Прочитать();
	
	Сервер = "edo.netpoint.net.ru";
	
	Если ИмяКомпьютера() = "1cweb" Тогда 
		Сервер = "localhost";	
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(Сервер, 80, ПараметрыАвторизации.ПользовательЦентральнойБазы, ПараметрыАвторизации.Пароль,,30); 
	Возврат HTTPСоединение;
	
КонецФункции

Функция ОтправитьПолучитьДанные(РежимСинхронизации = "ВыполнитьСинхронизацию", ВыполнениеВФоне = Ложь) Экспорт
	
	СформироватьСообщениеДляВыгрузкиДанных();
	
	РезультатВыполнения = Новый Структура("Выполнено, Ошибка", Ложь, "");	
	HTTPСоединение = СоединениеССервером();		
	КодУстройства = Константы.КодУстройства.Получить();
		
	Если РежимСинхронизации = "ВыполнитьСинхронизацию" Тогда 
		ОтправитьСообщения(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне);
		ПолучитьДанные(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне);	
	ИначеЕсли РежимСинхронизации = "ОтправитьФото" Тогда
		ОтправитьФото(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне);
	КонецЕсли;
	
	Если РезультатВыполнения.Выполнено Тогда 
		Константы.ДатаПоследнегоОбновления.Установить(ТекущаяДата());
		Справочники.Пользователи.ДобавитьТекущегоПользователя();
		СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне);
	Иначе
		СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне, Истина);
	КонецЕсли;

	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ОтправитьСообщения(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне)
	
	Для Каждого Сообщение из РегистрыСведений.ОчередьСообщенийНаСервер.МассивСообщений() Цикл 
		
		HTTPЗапрос = Новый HTTPЗапрос("kfk-agro_copy/hs/mobileKFK/PostData/" + КодУстройства + "/" + Строка(Сообщение.Идентификатор));
		HTTPЗапрос.УстановитьТелоИзСтроки(Сообщение.Данные, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение
			РезультатВыполнения.Выполнено = Ложь;
			РезультатВыполнения.Ошибка = "Не удалось установить соединение. Проверьте подключение к интернету.";
			СообщитьПользователю("Завершение", ВыполнениеВФоне, Истина);
			СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне, Истина);
			Возврат; 
		КонецПопытки;
		
		ОбработатьСостояниеHTTPОтвета(HTTPОтвет, РезультатВыполнения);
		Если РезультатВыполнения.Выполнено Тогда 
			РегистрыСведений.ОчередьСообщенийНаСервер.УдалитьСообщение(Сообщение.Идентификатор);
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры

Процедура ОтправитьФото(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне)
	
	Для Каждого Сообщение из РегистрыСведений.ОчередьФотоНаСервер.МассивСообщений() Цикл 
		
		HTTPЗапрос = Новый HTTPЗапрос("kfk-agro_copy/hs/mobileKFK/PostPhoto/" + КодУстройства + "/" + Сообщение.СсылкаСтрокой + "/" + Сообщение.ИндексСтрокой);
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Сообщение.Данные);
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение
			РезультатВыполнения.Выполнено = Ложь;
			РезультатВыполнения.Ошибка = "Не удалось установить соединение. Проверьте подключение к интернету.";
			СообщитьПользователю("Завершение", ВыполнениеВФоне, Истина);
			СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне, Истина);
			Возврат; 
		КонецПопытки;
		
		ОбработатьСостояниеHTTPОтвета(HTTPОтвет, РезультатВыполнения);
		Если РезультатВыполнения.Выполнено Тогда 
			РегистрыСведений.ОчередьФотоНаСервер.УдалитьСообщение(Сообщение.Документ, Сообщение.ИндексФото);	
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанные(HTTPСоединение, КодУстройства, РезультатВыполнения, ВыполнениеВФоне)
	
	HTTPЗапрос = Новый HTTPЗапрос("kfk-agro_copy/hs/mobileKFK/GetData/" + КодУстройства);
		
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		РезультатВыполнения.Ошибка = "Не удалось установить соединение. Проверьте подключение к интернету.";
		СообщитьПользователю("Завершение", ВыполнениеВФоне, Истина);
		СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне, Истина);
		Возврат; 
	КонецПопытки;
	
	ОбработатьСостояниеHTTPОтвета(HTTPОтвет, РезультатВыполнения);

	Если РезультатВыполнения.Выполнено Тогда 
		ОбработатьHTTPОтвет(HTTPОтвет, РезультатВыполнения);
		СообщитьПользователю("Завершение", ВыполнениеВФоне);
	Иначе
		СообщитьПользователю("Завершение", ВыполнениеВФоне, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСостояниеHTTPОтвета(HTTPОтвет, РезультатВыполнения)
	
	Если HTTPОтвет.КодСостояния = 200 Тогда 
		РезультатВыполнения.Выполнено = Истина;
		Возврат;
	КонецЕсли;
	
	Если HTTPОтвет.КодСостояния = 401 Тогда 
		РезультатВыполнения.Ошибка = "Указан некорректный пользователь или пароль";
	Иначе
		РезультатВыполнения.Ошибка = "Код ошибки: " + Строка(HTTPОтвет.КодСостояния);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСообщенийДляВыгруки

Процедура СформироватьСообщениеДляВыгрузкиДанных()

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЦентральныйУзелОбмена,  ЦентральныйУзелОбмена.НомерОтправленного);
	МассивДокументов = Новый Массив;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		ЭлементДанных = ВыборкаИзменений.Получить();
		ЗаписатьДанныеВМассив(ЭлементДанных, МассивДокументов);
	КонецЦикла;

	Если МассивДокументов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСообщения = Новый Структура("Documents", МассивДокументов);   
	
	ВыгружатьИнформациюОКлиенте = Константы.ВыгружатьИнформациюОКлиенте.Получить();
	Если ВыгружатьИнформациюОКлиенте Тогда
		СтруктураСообщения.Вставить("ClientInfo", ИнформацияОКлиенте());	
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();		
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	ЗаписатьJSON(ЗаписьJSON, СтруктураСообщения, НастройкиСериализацииJSON, "ПреобразоватьЗначение", ОбменВызовСервера);

	РегистрыСведений.ОчередьСообщенийНаСервер.ДобавитьСообщение(ЗаписьJSON);
	ПланыОбмена.ОбменССервером.УдалитьРегистрациюИзмененийОтправленныхДанных();
	Если ВыгружатьИнформациюОКлиенте Тогда
		Константы.ВыгружатьИнформациюОКлиенте.Установить(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ПреобразоватьЗначение(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Возврат Строка(Значение.УникальныйИдентификатор());	
		
КонецФункции

Процедура ЗаписатьДанныеВМассив(ЭлементДанных, МассивДокументов)
	
	СтруктураДокумента = Новый Структура();  
	СтруктураДокумента.Вставить("Ref", 		ЭлементДанных.Ссылка);
	СтруктураДокумента.Вставить("Date", 	ЭлементДанных.Дата);
	СтруктураДокумента.Вставить("Number", 	ЭлементДанных.Номер);	
	СтруктураДокумента.Вставить("DeletionMark", ЭлементДанных.ПометкаУдаления);	
	СтруктураДокумента.Вставить("Comment", 	ЭлементДанных.Комментарий);	
	СтруктураДокумента.Вставить("Author", 	ЭлементДанных.Автор);	
	СтруктураДокумента.Вставить("Pomology", ЭлементДанных.Помология);	
	СтруктураДокумента.Вставить("Orchard", 	ЭлементДанных.Поле);
	СтруктураДокумента.Вставить("HT", 		ЭлементДанных.Бригада);	
	СтруктураДокумента.Вставить("Varietal", ЭлементДанных.ПродукцияСортовая);	
	СтруктураДокумента.Вставить("Box", 		Новый Массив);
		
	Если ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ОФ_УборкаУрожая") Тогда 
		
		СтруктураДокумента_УборкаУрожая(ЭлементДанных, СтруктураДокумента);	
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ОФ_ОценкаКачестваУборкиУрожая") Тогда
		
		СтруктураДокумента_ОценкаКачества(ЭлементДанных, СтруктураДокумента);		
		
	КонецЕсли;
	
	МассивДокументов.Добавить(СтруктураДокумента);
	
КонецПроцедуры

Процедура СтруктураДокумента_ОценкаКачества(ЭлементДанных, СтруктураДокумента)
	
	СтруктураДокумента.Вставить("Size",			ЭлементДанных.КоличествоНесоответствий);
	СтруктураДокумента.Вставить("TotalSize",	ЭлементДанных.РазмерОбъединеннойПробы);		
	СтруктураДокумента.Вставить("Persent",		ЭлементДанных.ПроцентНессответсвий);		
	СтруктураДокумента.Вставить("Assessment",	ЭлементДанных.Оценка);
	СтруктураДокумента.Вставить("Score",		ЭлементДанных.Оценка);		
	СтруктураДокумента.Вставить("Malformation", Новый Массив);
	
	Для Каждого строка из ЭлементДанных.ПоказателиКачества Цикл
		Если ЗначениеЗаполнено(строка.Значение) Тогда 
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Quality", 	строка.Показатель);	
			СтруктураСтроки.Вставить("Value", 		строка.Значение);
			СтруктураДокумента.Malformation.Добавить(СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого строка из ЭлементДанных.Контейнеры Цикл 
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Barcode", 	строка.Штрихкод);	
		СтруктураСтроки.Вставить("Scan", 		строка.ШтрихкодОтсканирован);
		СтруктураСтроки.Вставить("DateUpdate", 	строка.ДатаДобавления);
		СтруктураДокумента.Box.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	//СтруктураДокумента.Вставить("Photo", 		Новый Массив);
	//Для Каждого строка из ЭлементДанных.Фото Цикл 
	//	Если ЗначениеЗаполнено(строка.АдресНаДиске) Тогда 
	//		ДвоичныеДанныеФото = Новый ДвоичныеДанные(строка.АдресНаДиске);
	//		СтруктураДокумента.Photo.Добавить(Base64Строка(ДвоичныеДанныеФото));
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Процедура СтруктураДокумента_УборкаУрожая(ЭлементДанных, СтруктураДокумента)
	
	СтруктураДокумента.Вставить("CountBox",	ЭлементДанных.ИтогоКонтейнеров);		
	Для Каждого строка из ЭлементДанных.Контейнеры Цикл 
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Barcode", 	строка.Штрихкод);	
		СтруктураСтроки.Вставить("Scan", 		строка.ШтрихкодОтсканирован);
		СтруктураСтроки.Вставить("DateUpdate", 	строка.ДатаДобавления);
		СтруктураСтроки.Вставить("Varietal", 	строка.ПродукцияСортовая);
		СтруктураДокумента.Box.Добавить(СтруктураСтроки);
	КонецЦикла;
	
КонецПроцедуры

Функция ИнформацияОКлиенте()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ИнформацияОКлиенте = Новый Структура;
	ИнформацияОКлиенте.Вставить("OS", СистемнаяИнформация.ВерсияОС);
	ИнформацияОКлиенте.Вставить("RAM", СистемнаяИнформация.ОперативнаяПамять);
	ИнформацияОКлиенте.Вставить("DeviceName", ИмяКомпьютера());
	ИнформацияОКлиенте.Вставить("ScreenSize", Константы.ДиагональЭкрана.Получить());
	ИнформацияОКлиенте.Вставить("CPU", СистемнаяИнформация.Процессор);
	ИнформацияОКлиенте.Вставить("AppVersion", СистемнаяИнформация.ВерсияПриложения);
	
	Возврат ИнформацияОКлиенте;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗагруженныхДанных

Процедура ОбработатьHTTPОтвет(HTTPОтвет, РезультатВыполнения)
	
	Попытка
		
		Содержимое = HTTPОтвет.ПолучитьТелоКакСтроку();		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Содержимое);
		Данные = ПрочитатьJSON(ЧтениеJSON,, "Date", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();

		ЗаписатьДанные(Данные);
		
	Исключение
		РезультатВыполнения.Выполнено = Ложь;
		РезультатВыполнения.Ошибка = "Ошибка обработки данных с сервера";	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДанные(Данные)
	
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда 
		Возврат;	
	КонецЕсли;
	
	Если Данные.Свойство("Catalogs") Тогда 
		Для Каждого Элемент из Данные.Catalogs Цикл 
			ЗаписатьСправочник(Элемент);	
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("Documents") Тогда 
		Для Каждого Элемент из Данные.Documents Цикл 
			ЗаписатьДокумент(Элемент);	
		КонецЦикла;
	КонецЕсли;

	Если Данные.Свойство("Settings") Тогда 
		ЗаписатьПараметры(Данные["Settings"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСправочник(Элемент)
	
	Если Элемент.Свойство("PomologyName") Тогда  
		
		Ссылка = Справочники.АпкПартии.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.Pomology));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.АпкПартии.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = Элемент.PomologyName;
		Объект.Записать();
		
	ИначеЕсли Элемент.Свойство("OrchardName") Тогда
		
		Ссылка = Справочники.АпкПоля.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.Orchard));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.АпкПоля.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = Элемент.OrchardName;
		Объект.Записать();
		
	ИначеЕсли Элемент.Свойство("QualityName") Тогда
		
		Ссылка = Справочники.ОФ_ПоказателиКачества.НайтиПоНаименованию(Элемент.QualityName, Истина);
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			Объект = Ссылка.ПолучитьОбъект();
		Иначе
			Ссылка = Справочники.ОФ_ПоказателиКачества.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.Quality));
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Объект = Справочники.ОФ_ПоказателиКачества.СоздатьЭлемент();
				Объект.УстановитьСсылкуНового(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Объект.Наименование = Элемент.QualityName;
		Объект.Записать();

	ИначеЕсли Элемент.Свойство("SKUName") Тогда
		
		Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.SKU));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = Элемент.SKUName;
		Объект.АпкПартия =  Справочники.АпкПартии.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.Pomology));
		Объект.Записать();
		
	ИначеЕсли Элемент.Свойство("HTName") Тогда
			
		Ссылка = Справочники.Бригады.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.HT));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Справочники.Бригады.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Наименование = Элемент.HTName;
		Объект.Звеньевой = Элемент.HTBoss;
		Объект.Код = Элемент.HTCode; 
		Объект.НомерТелефона = Элемент["tel"]; 
		Объект.Записать();

	КонецЕсли;
		
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Элемент)
	
	Если Элемент.Свойство("TaskNumber") Тогда  
		
		Ссылка = Документы.ЭтапПроизводства2_2.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент["Task"]));
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Объект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		Объект.Дата = Элемент["Date"];
		Объект.Номер = Элемент["TaskNumber"];
		Объект.Поле = Справочники.АпкПоля.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент["Orchard"]));
		
		Объект.ВыходныеИзделия.Очистить();
		
		Для Каждого строка из Элемент["Products"] Цикл 
			НоваяСтрока = Объект.ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(строка));
		КонецЦикла;
		
		Объект.Записать();
				
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ЗаписатьПараметры(Параметры)

	Если Параметры.Свойство("GetClientInfo") Тогда
		Константы.ВыгружатьИнформациюОКлиенте.Установить(Параметры["GetClientInfo"]);		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура СформироватьОписаниеТекущегоСостояния(ЕстьОшибки, ТекущаяСтадияРаботы, ОписаниеПоследнегоОбновления)

		Если (Не ЗначениеЗаполнено(ТекущаяСтадияРаботы) 
			Или ТекущаяСтадияРаботы = "Подготовка" 
			Или ТекущаяСтадияРаботы = "Подключение" 
			Или ТекущаяСтадияРаботы = "СозданиеСообщений" 
			Или ТекущаяСтадияРаботы = "ОтправкаДанных") Тогда

			ПредставлениеЭтапа = НСтр("ru = 'Подключение'; en = 'Connecting'");

		ИначеЕсли ТекущаяСтадияРаботы = "ЗагрузкаДанных" Тогда
			ПредставлениеЭтапа = НСтр("ru = 'Загрузка'; en = 'Loading'");

		ИначеЕсли (ТекущаяСтадияРаботы = "ПросмотрДанных" 
			Или ТекущаяСтадияРаботы = "ЗаписьДанных" 
			Или ТекущаяСтадияРаботы = "Завершение"
			Или ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации") Тогда
			ПредставлениеЭтапа = НСтр("ru = 'Обработка'; en = 'Processing'");

		КонецЕсли;


	Если ЕстьОшибки Тогда
		ОписаниеПоследнегоОбновления = 
			СтрШаблон("%1", НСтр("ru = 'Ошибка (см. протокол)'; en = 'Error (view protocol)!'"));

	Иначе
		ОписаниеПоследнегоОбновления = 
			СтрШаблон("%1...", ПредставлениеЭтапа);

	КонецЕсли;

КонецПроцедуры
	
// Сообщает пользователю текущую информацию о процессе синхронизации с сервером.
//
// Параметры:
//  ТекущаяСтадия	 - Строка - Текущая стадия в процедуре синхронизации;
//  ВыполнениеВФоне	 - Булево - Признак, что сообщения пользователю идут из фонового задания;
//  ЕстьОшибки		 - Булево - Признак наличия ошибок при обмене;
//  ЕстьДанные		 - Булево - Признак наличия данных загруженных с сервера;
//  Данные			 - Массив[4], Строка - Данные, которые нужно передать на клиент.
//
Процедура СообщитьПользователю(ТекущаяСтадия, ВыполнениеВФоне, ЕстьОшибки = Ложь, ЕстьДанные = Ложь, Данные = Неопределено)

	Если Не ВыполнениеВФоне Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		ТекстСообщения = 
			СтрШаблон(
				"%1;%2;%3;%4",
				ТекущаяСтадия, ЕстьОшибки, ЕстьДанные, 
				СтрШаблон("%1,%2,%3,%4", Данные[0],Данные[1], Данные[2], Данные[3]));
	Иначе
		ТекстСообщения = 
			СтрШаблон(
				"%1;%2;%3;%4",
				ТекущаяСтадия, ЕстьОшибки, ЕстьДанные, Данные);
	КонецЕсли;

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Сообщение.Сообщить();

КонецПроцедуры

#КонецОбласти


