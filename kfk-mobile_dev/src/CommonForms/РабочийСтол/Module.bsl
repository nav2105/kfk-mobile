
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияВызовСервера.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "РаспоряженияДатаПослднегоСбора", "Распоряжения.ДатаПоследнегоСбора");	
	ОбщегоНазначенияВызовСервера.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "ОценкиКачестваДата", "ОценкиКачества.Дата");
	ЗаполнитьРаспоряжения();
	ЗаполнитьДеревоОценок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
	ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДатуСинхронизации" Тогда
		ОбменКлиент.УстановитьПодписьКДатеОбновления(
			Элементы, ОписаниеПоследнегоОбновления);

	ИначеЕсли ИмяСобытия = "ВыполненаАвторизация" Тогда
		
		ЭтаФорма.Заголовок = Параметр.Пользователь;
		ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "НачатьСинхронизацию" Тогда

		ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

		Параметр.Вставить("ДатаНачалаСинхронизации", ТекущаяДата());
		Параметр.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

		ЗаданиеЗапущено = ОбменВызовСервера.ЗапуститьСинхронизациюССерверомВФоне(Параметр, ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);

		Если ЗаданиеЗапущено Тогда
			ПодключитьОбработчикОжидания("ВыполнитьСинхронизациюПроверитьИсполнение", 0.2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ВыполняетсяСинхронизация" Тогда

		Если Не Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе Тогда
			Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе;
		КонецЕсли;

		Если Параметр.ОбновитьДатуСинхронизации Тогда
			Оповестить("ОбновитьДатуСинхронизации");
		КонецЕсли;

		Если Параметр.ЗаданиеВыполнено 
		 Или Не Параметр.СообщениеОбОшибке = Неопределено Тогда
			ОбменКлиент.ЗавершитьСинхронизацию(ЭтаФорма, СведенияОЗагруженныхДанных);
		Иначе
			ПодключитьОбработчикОжидания("ВыполнитьСинхронизациюПроверитьИсполнение", 2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "СинхронизацияЗавершена" Тогда

		ЗаполнитьРаспоряжения();
		ЗаполнитьДеревоОценок();

		ПодключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);
		
	ИначеЕсли ИмяСобытия = "ЗаписьУборкаУрожая" Тогда

		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеДанные", Истина);		
		ЗаполнитьРаспоряжения();
		ОбменКлиент.УстановитьПодписьКДатеОбновления(Элементы, ОписаниеПоследнегоОбновления);
		ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ЗаписьОценкаКачества" Тогда 
		
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеДанные", Истина);		
		ЗаполнитьДеревоОценок();
		ОбменКлиент.УстановитьПодписьКДатеОбновления(Элементы, ОписаниеПоследнегоОбновления);
		ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ОтправитьФото" Тогда

		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеФото", Истина);		
		ЗаполнитьДеревоОценок();		
		ОтправитьФото();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияДобавитьНажатие(Элемент)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ГруппаРаспоряжения Тогда 
		ОткрытьФорму("Документ.ОФ_УборкаУрожая.ФормаОбъекта");
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ГруппаОценкаКачества Тогда
		ОткрытьФорму("Документ.ОФ_ОценкаКачестваУборкиУрожая.ФормаОбъекта");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Распоряжения.ТекущиеДанные; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = Новый Структура("Поле, Помология", ТекущиеДанные.Поле, ТекущиеДанные.Помология);
	ОткрытьФорму("Документ.ОФ_УборкаУрожая.Форма.ФормаСписка", ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиКачестваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОценкиКачества.ТекущиеДанные; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Документ.ОФ_ОценкаКачестваУборкиУрожая.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияОбработкаЗапросаОбновления()
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОценкиКачестваОбработкаЗапросаОбновления()
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Синхронизировать(Команда)

	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботу(Команда)
	
	ЗавершитьРаботуСистемы(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения


&НаСервере
Процедура ЗаполнитьРаспоряжения()

	Распоряжения.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка.Поле КАК Поле,
	                      |	ЭтапПроизводства2_2ВыходныеИзделия.Номенклатура.АпкПартия КАК Помология
	                      |ПОМЕСТИТЬ Распоряжения
	                      |ИЗ
	                      |	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
	                      |ГДЕ
	                      |	НЕ ЭтапПроизводства2_2ВыходныеИзделия.Ссылка.ПометкаУдаления
	                      |	И ЭтапПроизводства2_2ВыходныеИзделия.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЭтапПроизводства2_2ВыходныеИзделия.Ссылка.Поле,
	                      |	ЭтапПроизводства2_2ВыходныеИзделия.Номенклатура.АпкПартия
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОФ_УборкаУрожаяКонтейнеры.Штрихкод) КАК КоличествоКонтейнеров,
	                      |	ОФ_УборкаУрожаяКонтейнеры.Ссылка.Поле КАК Поле,
	                      |	ОФ_УборкаУрожаяКонтейнеры.Ссылка.Помология КАК Помология,
	                      |	МАКСИМУМ(ОФ_УборкаУрожаяКонтейнеры.Ссылка.Дата) КАК ДатаПоследнегоСбора
	                      |ПОМЕСТИТЬ Собрано
	                      |ИЗ
	                      |	Документ.ОФ_УборкаУрожая.Контейнеры КАК ОФ_УборкаУрожаяКонтейнеры
	                      |ГДЕ
	                      |	НЕ ОФ_УборкаУрожаяКонтейнеры.Ссылка.ПометкаУдаления
	                      |	И ОФ_УборкаУрожаяКонтейнеры.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОФ_УборкаУрожаяКонтейнеры.Ссылка.Поле,
	                      |	ОФ_УборкаУрожаяКонтейнеры.Ссылка.Помология
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ISNULL(Распоряжения.Поле, Собрано.Поле) КАК Поле,
	                      |	ISNULL(Распоряжения.Помология, Собрано.Помология) КАК Помология,
	                      |	ЕСТЬNULL(Собрано.КоличествоКонтейнеров, 0) КАК КоличествоКонтейнеров,
	                      |	ЕСТЬNULL(Собрано.ДатаПоследнегоСбора, """") КАК ДатаПоследнегоСбора
	                      |ИЗ
	                      |	Распоряжения КАК Распоряжения
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ Собрано КАК Собрано
	                      |		ПО Распоряжения.Поле = Собрано.Поле
	                      |			И Распоряжения.Помология = Собрано.Помология
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Собрано.ДатаПоследнегоСбора УБЫВ,
	                      |	Распоряжения.Поле.Наименование");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("НачалоПериода", Дата(2019,7,1));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДата()));	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Индекс = 1;
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Распоряжения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
		НоваяСтрока.Картинка = БиблиотекаКартинок["СтрокаПоля" + Строка(Индекс)];
		Индекс = ?(Индекс >= 4,1, Индекс + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОценок()
	
	ОценкиКачества.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 100
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Дата КАК Дата,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Поле КАК Поле,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Помология КАК Помология,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Бригада КАК Бригада,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.КоличествоНесоответствий КАК КоличествоНесоответствий,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.ПроцентНессответсвий КАК ПроцентНессответсвий,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Оценка КАК Оценка,
	                      |	ОФ_ОценкаКачестваУборкиУрожая.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ОФ_ОценкаКачестваУборкиУрожая КАК ОФ_ОценкаКачестваУборкиУрожая
	                      |ГДЕ
	                      |	НЕ ОФ_ОценкаКачестваУборкиУрожая.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ОценкиКачества.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.Оценка > 0 И Выборка.Оценка <=5 Тогда   
			НоваяСтрока.Картинка = БиблиотекаКартинок["Цифра" + Строка(Выборка.Оценка)];
		Иначе
			НоваяСтрока.Картинка = Новый Картинка;	
		КонецЕсли;
	КонецЦикла;		

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСинхронизация

&НаКлиенте
Процедура ВыполнитьСинхронизациюНачало()

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ВыполнитьСинхронизацию");
	ПараметрыЗапуска.Вставить("ДатаНачалаСинхронизации", ТекущаяДата());

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьФото()

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ОтправитьФото");
	ПараметрыЗапуска.Вставить("ДатаНачалаСинхронизации", ТекущаяДата());

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияУстановитьПодписьКДатеОбновления()

	ОбменКлиент.УстановитьПодписьКДатеОбновления(Элементы, ОписаниеПоследнегоОбновления);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюПроверитьИсполнение()

	Результат = ОбменВызовСервера.ПроверитьСостояниеФоновойСинхронизации(ФоновоеЗаданиеИдентификатор, 
							ФоновоеЗаданиеАдресХранилища, 
							ОписаниеПоследнегоОбновления);

	Оповестить("ВыполняетсяСинхронизация", Результат)

КонецПроцедуры


#КонецОбласти







