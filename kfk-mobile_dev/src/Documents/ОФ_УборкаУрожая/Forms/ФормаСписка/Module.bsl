
&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Поле", 		Поле);
	Параметры.Свойство("Помология",	Помология);
	
	СформироватьЗаголовк();

	ОбщегоНазначенияВызовСервера.УстановитьЭлементОтбора(Список.Отбор, "Поле",Поле,ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Поле));
	ОбщегоНазначенияВызовСервера.УстановитьЭлементОтбора(Список.Отбор, "Помология",Помология,ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Помология));
	
	ОбщегоНазначенияВызовСервера.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "Дата", "Список.Дата");	

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьНажатие(Элемент)
	
	ПараметрыЗаполнения = Новый Структура("Поле, Помология", Поле, Помология);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);

	ОткрытьФорму("Документ.ОФ_УборкаУрожая.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовк()
	
	Заголовок = Строка(Поле) + ", " + Строка(Помология);
	
КонецПроцедуры


#Область СлужебныеПроцедурыИФункцииСинхронизация

&НаКлиенте
Процедура ВыполнитьСинхронизациюНачало()

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ВыполнитьСинхронизацию");
	ПараметрыЗапуска.Вставить("ДатаНачалаСинхронизации", ТекущаяДата());

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияУстановитьПодписьКДатеОбновления()


	ОбменКлиент.УстановитьПодписьКДатеОбновления(Элементы, ОписаниеПоследнегоОбновления);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюПроверитьИсполнение()

	Результат = ОбменВызовСервера.ПроверитьСостояниеФоновойСинхронизации(ФоновоеЗаданиеИдентификатор, 
							ФоновоеЗаданиеАдресХранилища, 
							ОписаниеПоследнегоОбновления);

	Оповестить("ВыполняетсяСинхронизация", Результат)

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДатуСинхронизации" Тогда
		ОбменКлиент.УстановитьПодписьКДатеОбновления(
			Элементы, ОписаниеПоследнегоОбновления);

		
	ИначеЕсли ИмяСобытия = "НачатьСинхронизацию" Тогда

		ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

		Параметр.Вставить("ДатаНачалаСинхронизации", ТекущаяДата());
		Параметр.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

		ЗаданиеЗапущено = 
			ОбменВызовСервера.ЗапуститьСинхронизациюССерверомВФоне(
				Параметр, ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);

		Если ЗаданиеЗапущено Тогда
			ПодключитьОбработчикОжидания("ВыполнитьСинхронизациюПроверитьИсполнение", 0.2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ВыполняетсяСинхронизация" Тогда

		Если Не Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе Тогда
			Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе;
		КонецЕсли;

		Если Параметр.ОбновитьДатуСинхронизации Тогда
			Оповестить("ОбновитьДатуСинхронизации");
		КонецЕсли;

		Если Параметр.ЗаданиеВыполнено 
		 Или Не Параметр.СообщениеОбОшибке = Неопределено Тогда
			ОбменКлиент.ЗавершитьСинхронизацию(ЭтаФорма, СведенияОЗагруженныхДанных);
		Иначе
			ПодключитьОбработчикОжидания("ВыполнитьСинхронизациюПроверитьИсполнение", 2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "СинхронизацияЗавершена" Тогда

		ПодключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);
		
	//ИначеЕсли ИмяСобытия = "ЗаписьУборкаУрожая" Тогда

	//	ЗаполнитьРаспоряжения();
	//	

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
	ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорациНазадНажатие(Элемент)
	Закрыть();
КонецПроцедуры

#КонецОбласти
